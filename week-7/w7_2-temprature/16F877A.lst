CCS PCM C Compiler, Version 5.007, 61971               19-Nis-24 16:11

               Filename:   C:\Users\Onur\Documents\GitHub\embedded-system_PIC\week-7\w7_2-temprature\16F877A.lst

               ROM used:   1113 words (14%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           41 (11%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3D0
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,32
000D:  DATA E5,33
000E:  DATA 65,39
000F:  DATA BD,12
0010:  DATA 66,00
*
00AB:  MOVLW  8E
00AC:  MOVWF  77
00AD:  MOVF   2B,W
00AE:  MOVWF  78
00AF:  MOVF   2A,W
00B0:  MOVWF  79
00B1:  CLRF   7A
00B2:  MOVF   78,F
00B3:  BTFSS  03.2
00B4:  GOTO   0BF
00B5:  MOVF   79,W
00B6:  MOVWF  78
00B7:  CLRF   79
00B8:  MOVLW  08
00B9:  SUBWF  77,F
00BA:  MOVF   78,F
00BB:  BTFSS  03.2
00BC:  GOTO   0BF
00BD:  CLRF   77
00BE:  GOTO   0C7
00BF:  BCF    03.0
00C0:  BTFSC  78.7
00C1:  GOTO   0C6
00C2:  RLF    79,F
00C3:  RLF    78,F
00C4:  DECF   77,F
00C5:  GOTO   0BF
00C6:  BCF    78.7
00C7:  BCF    0A.3
00C8:  BCF    0A.4
00C9:  GOTO   40D (RETURN)
00CA:  MOVF   37,W
00CB:  BTFSC  03.2
00CC:  GOTO   13A
00CD:  MOVWF  3F
00CE:  MOVF   3B,W
00CF:  BTFSC  03.2
00D0:  GOTO   13A
00D1:  ADDWF  3F,F
00D2:  BTFSC  03.0
00D3:  GOTO   0DB
00D4:  MOVLW  7F
00D5:  SUBWF  3F,F
00D6:  BTFSS  03.0
00D7:  GOTO   13A
00D8:  BTFSC  03.2
00D9:  GOTO   13A
00DA:  GOTO   0DF
00DB:  MOVLW  81
00DC:  ADDWF  3F,F
00DD:  BTFSC  03.0
00DE:  GOTO   13A
00DF:  MOVF   3F,W
00E0:  MOVWF  77
00E1:  CLRF   78
00E2:  CLRF   79
00E3:  CLRF   7A
00E4:  MOVF   38,W
00E5:  MOVWF  43
00E6:  BSF    43.7
00E7:  MOVF   39,W
00E8:  MOVWF  42
00E9:  MOVF   3A,W
00EA:  MOVWF  41
00EB:  MOVLW  18
00EC:  MOVWF  3F
00ED:  CLRF   40
00EE:  BTFSS  41.0
00EF:  GOTO   108
00F0:  MOVF   3E,W
00F1:  ADDWF  7A,F
00F2:  BTFSS  03.0
00F3:  GOTO   0FA
00F4:  INCF   79,F
00F5:  BTFSS  03.2
00F6:  GOTO   0FA
00F7:  INCF   78,F
00F8:  BTFSC  03.2
00F9:  BSF    40.7
00FA:  MOVF   3D,W
00FB:  ADDWF  79,F
00FC:  BTFSS  03.0
00FD:  GOTO   101
00FE:  INCF   78,F
00FF:  BTFSC  03.2
0100:  BSF    40.7
0101:  MOVF   3C,W
0102:  MOVWF  39
0103:  BSF    39.7
0104:  MOVF   39,W
0105:  ADDWF  78,F
0106:  BTFSC  03.0
0107:  BSF    40.7
0108:  RLF    40,F
0109:  RRF    78,F
010A:  RRF    79,F
010B:  RRF    7A,F
010C:  RRF    43,F
010D:  RRF    42,F
010E:  RRF    41,F
010F:  BCF    03.0
0110:  DECFSZ 3F,F
0111:  GOTO   0ED
0112:  MOVLW  01
0113:  ADDWF  77,F
0114:  BTFSC  03.0
0115:  GOTO   13A
0116:  BTFSC  78.7
0117:  GOTO   11F
0118:  RLF    43,F
0119:  RLF    7A,F
011A:  RLF    79,F
011B:  RLF    78,F
011C:  DECF   77,F
011D:  BTFSC  03.2
011E:  GOTO   13A
011F:  BTFSS  43.7
0120:  GOTO   130
0121:  INCF   7A,F
0122:  BTFSS  03.2
0123:  GOTO   130
0124:  INCF   79,F
0125:  BTFSS  03.2
0126:  GOTO   130
0127:  INCF   78,F
0128:  BTFSS  03.2
0129:  GOTO   130
012A:  RRF    78,F
012B:  RRF    79,F
012C:  RRF    7A,F
012D:  INCF   77,F
012E:  BTFSC  03.2
012F:  GOTO   13A
0130:  MOVF   38,W
0131:  MOVWF  40
0132:  MOVF   3C,W
0133:  XORWF  40,F
0134:  BTFSS  40.7
0135:  GOTO   138
0136:  BSF    78.7
0137:  GOTO   13E
0138:  BCF    78.7
0139:  GOTO   13E
013A:  CLRF   77
013B:  CLRF   78
013C:  CLRF   79
013D:  CLRF   7A
013E:  RETURN
013F:  MOVF   2A,W
0140:  BTFSC  03.2
0141:  GOTO   204
0142:  MOVWF  36
0143:  MOVF   2E,W
0144:  BTFSC  03.2
0145:  GOTO   204
0146:  SUBWF  36,F
0147:  BTFSS  03.0
0148:  GOTO   14E
0149:  MOVLW  7F
014A:  ADDWF  36,F
014B:  BTFSC  03.0
014C:  GOTO   204
014D:  GOTO   154
014E:  MOVLW  81
014F:  SUBWF  36,F
0150:  BTFSS  03.0
0151:  GOTO   204
0152:  BTFSC  03.2
0153:  GOTO   204
0154:  MOVF   36,W
0155:  MOVWF  77
0156:  CLRF   78
0157:  CLRF   79
0158:  CLRF   7A
0159:  CLRF   35
015A:  MOVF   2B,W
015B:  MOVWF  34
015C:  BSF    34.7
015D:  MOVF   2C,W
015E:  MOVWF  33
015F:  MOVF   2D,W
0160:  MOVWF  32
0161:  MOVLW  19
0162:  MOVWF  36
0163:  MOVF   31,W
0164:  SUBWF  32,F
0165:  BTFSC  03.0
0166:  GOTO   177
0167:  MOVLW  01
0168:  SUBWF  33,F
0169:  BTFSC  03.0
016A:  GOTO   177
016B:  SUBWF  34,F
016C:  BTFSC  03.0
016D:  GOTO   177
016E:  SUBWF  35,F
016F:  BTFSC  03.0
0170:  GOTO   177
0171:  INCF   35,F
0172:  INCF   34,F
0173:  INCF   33,F
0174:  MOVF   31,W
0175:  ADDWF  32,F
0176:  GOTO   1A9
0177:  MOVF   30,W
0178:  SUBWF  33,F
0179:  BTFSC  03.0
017A:  GOTO   192
017B:  MOVLW  01
017C:  SUBWF  34,F
017D:  BTFSC  03.0
017E:  GOTO   192
017F:  SUBWF  35,F
0180:  BTFSC  03.0
0181:  GOTO   192
0182:  INCF   35,F
0183:  INCF   34,F
0184:  MOVF   30,W
0185:  ADDWF  33,F
0186:  MOVF   31,W
0187:  ADDWF  32,F
0188:  BTFSS  03.0
0189:  GOTO   1A9
018A:  INCF   33,F
018B:  BTFSS  03.2
018C:  GOTO   1A9
018D:  INCF   34,F
018E:  BTFSS  03.2
018F:  GOTO   1A9
0190:  INCF   35,F
0191:  GOTO   1A9
0192:  MOVF   2F,W
0193:  IORLW  80
0194:  SUBWF  34,F
0195:  BTFSC  03.0
0196:  GOTO   1A8
0197:  MOVLW  01
0198:  SUBWF  35,F
0199:  BTFSC  03.0
019A:  GOTO   1A8
019B:  INCF   35,F
019C:  MOVF   2F,W
019D:  IORLW  80
019E:  ADDWF  34,F
019F:  MOVF   30,W
01A0:  ADDWF  33,F
01A1:  BTFSS  03.0
01A2:  GOTO   186
01A3:  INCF   34,F
01A4:  BTFSS  03.2
01A5:  GOTO   186
01A6:  INCF   35,F
01A7:  GOTO   186
01A8:  BSF    7A.0
01A9:  DECFSZ 36,F
01AA:  GOTO   1AC
01AB:  GOTO   1B7
01AC:  BCF    03.0
01AD:  RLF    32,F
01AE:  RLF    33,F
01AF:  RLF    34,F
01B0:  RLF    35,F
01B1:  BCF    03.0
01B2:  RLF    7A,F
01B3:  RLF    79,F
01B4:  RLF    78,F
01B5:  RLF    37,F
01B6:  GOTO   163
01B7:  BTFSS  37.0
01B8:  GOTO   1BF
01B9:  BCF    03.0
01BA:  RRF    78,F
01BB:  RRF    79,F
01BC:  RRF    7A,F
01BD:  RRF    37,F
01BE:  GOTO   1C2
01BF:  DECF   77,F
01C0:  BTFSC  03.2
01C1:  GOTO   204
01C2:  BTFSC  37.7
01C3:  GOTO   1EB
01C4:  BCF    03.0
01C5:  RLF    32,F
01C6:  RLF    33,F
01C7:  RLF    34,F
01C8:  RLF    35,F
01C9:  MOVF   31,W
01CA:  SUBWF  32,F
01CB:  BTFSC  03.0
01CC:  GOTO   1D7
01CD:  MOVLW  01
01CE:  SUBWF  33,F
01CF:  BTFSC  03.0
01D0:  GOTO   1D7
01D1:  SUBWF  34,F
01D2:  BTFSC  03.0
01D3:  GOTO   1D7
01D4:  SUBWF  35,F
01D5:  BTFSS  03.0
01D6:  GOTO   1FA
01D7:  MOVF   30,W
01D8:  SUBWF  33,F
01D9:  BTFSC  03.0
01DA:  GOTO   1E2
01DB:  MOVLW  01
01DC:  SUBWF  34,F
01DD:  BTFSC  03.0
01DE:  GOTO   1E2
01DF:  SUBWF  35,F
01E0:  BTFSS  03.0
01E1:  GOTO   1FA
01E2:  MOVF   2F,W
01E3:  IORLW  80
01E4:  SUBWF  34,F
01E5:  BTFSC  03.0
01E6:  GOTO   1EB
01E7:  MOVLW  01
01E8:  SUBWF  35,F
01E9:  BTFSS  03.0
01EA:  GOTO   1FA
01EB:  INCF   7A,F
01EC:  BTFSS  03.2
01ED:  GOTO   1FA
01EE:  INCF   79,F
01EF:  BTFSS  03.2
01F0:  GOTO   1FA
01F1:  INCF   78,F
01F2:  BTFSS  03.2
01F3:  GOTO   1FA
01F4:  INCF   77,F
01F5:  BTFSC  03.2
01F6:  GOTO   204
01F7:  RRF    78,F
01F8:  RRF    79,F
01F9:  RRF    7A,F
01FA:  MOVF   2B,W
01FB:  MOVWF  36
01FC:  MOVF   2F,W
01FD:  XORWF  36,F
01FE:  BTFSS  36.7
01FF:  GOTO   202
0200:  BSF    78.7
0201:  GOTO   208
0202:  BCF    78.7
0203:  GOTO   208
0204:  CLRF   77
0205:  CLRF   78
0206:  CLRF   79
0207:  CLRF   7A
0208:  BCF    0A.3
0209:  BCF    0A.4
020A:  GOTO   435 (RETURN)
*
0249:  MOVF   0B,W
024A:  MOVWF  2B
024B:  BCF    0B.7
024C:  BSF    03.5
024D:  BSF    03.6
024E:  BSF    0C.7
024F:  BSF    0C.0
0250:  NOP
0251:  NOP
0252:  BTFSC  03.0
0253:  GOTO   27B
0254:  BCF    03.5
0255:  MOVF   0C,W
0256:  ANDLW  7F
0257:  BCF    03.6
0258:  MOVWF  2C
0259:  BSF    03.6
025A:  MOVF   0D,W
025B:  BCF    03.6
025C:  MOVWF  2D
025D:  BSF    03.6
025E:  MOVF   0F,W
025F:  BCF    03.6
0260:  MOVWF  2E
0261:  MOVF   2C,W
0262:  MOVWF  37
0263:  CALL   21D
0264:  MOVF   2D,W
0265:  BSF    03.6
0266:  MOVWF  0D
0267:  BCF    03.6
0268:  MOVF   2E,W
0269:  BSF    03.6
026A:  MOVWF  0F
026B:  BSF    03.5
026C:  BSF    0C.7
026D:  BSF    0C.0
026E:  NOP
026F:  NOP
0270:  BCF    03.5
0271:  BCF    03.6
0272:  DECFSZ 2A,F
0273:  GOTO   275
0274:  GOTO   278
0275:  BSF    03.5
0276:  BSF    03.6
0277:  GOTO   27B
0278:  GOTO   29A
0279:  BSF    03.5
027A:  BSF    03.6
027B:  BCF    03.5
027C:  RLF    0C,W
027D:  RLF    0E,W
027E:  ANDLW  7F
027F:  BCF    03.6
0280:  MOVWF  2C
0281:  BSF    03.6
0282:  MOVF   0D,W
0283:  BCF    03.6
0284:  MOVWF  2D
0285:  BSF    03.6
0286:  MOVF   0F,W
0287:  BCF    03.6
0288:  MOVWF  2E
0289:  MOVF   2C,W
028A:  MOVWF  37
028B:  CALL   21D
028C:  MOVF   2D,W
028D:  BSF    03.6
028E:  MOVWF  0D
028F:  BCF    03.6
0290:  MOVF   2E,W
0291:  BSF    03.6
0292:  MOVWF  0F
0293:  INCF   0D,F
0294:  BTFSC  03.2
0295:  INCF   0F,F
0296:  BCF    03.0
0297:  BCF    03.6
0298:  DECFSZ 2A,F
0299:  GOTO   24C
029A:  BTFSC  2B.7
029B:  BSF    0B.7
029C:  BCF    0A.3
029D:  BCF    0A.4
029E:  GOTO   447 (RETURN)
029F:  BTFSC  03.1
02A0:  GOTO   2A4
02A1:  MOVLW  3F
02A2:  MOVWF  04
02A3:  BCF    03.7
02A4:  CLRF   77
02A5:  CLRF   78
02A6:  CLRF   79
02A7:  CLRF   7A
02A8:  CLRF   3F
02A9:  CLRF   40
02AA:  CLRF   41
02AB:  CLRF   42
02AC:  MOVF   3E,W
02AD:  IORWF  3D,W
02AE:  IORWF  3C,W
02AF:  IORWF  3B,W
02B0:  BTFSC  03.2
02B1:  GOTO   2E2
02B2:  MOVLW  20
02B3:  MOVWF  43
02B4:  BCF    03.0
02B5:  RLF    37,F
02B6:  RLF    38,F
02B7:  RLF    39,F
02B8:  RLF    3A,F
02B9:  RLF    3F,F
02BA:  RLF    40,F
02BB:  RLF    41,F
02BC:  RLF    42,F
02BD:  MOVF   3E,W
02BE:  SUBWF  42,W
02BF:  BTFSS  03.2
02C0:  GOTO   2CB
02C1:  MOVF   3D,W
02C2:  SUBWF  41,W
02C3:  BTFSS  03.2
02C4:  GOTO   2CB
02C5:  MOVF   3C,W
02C6:  SUBWF  40,W
02C7:  BTFSS  03.2
02C8:  GOTO   2CB
02C9:  MOVF   3B,W
02CA:  SUBWF  3F,W
02CB:  BTFSS  03.0
02CC:  GOTO   2DC
02CD:  MOVF   3B,W
02CE:  SUBWF  3F,F
02CF:  MOVF   3C,W
02D0:  BTFSS  03.0
02D1:  INCFSZ 3C,W
02D2:  SUBWF  40,F
02D3:  MOVF   3D,W
02D4:  BTFSS  03.0
02D5:  INCFSZ 3D,W
02D6:  SUBWF  41,F
02D7:  MOVF   3E,W
02D8:  BTFSS  03.0
02D9:  INCFSZ 3E,W
02DA:  SUBWF  42,F
02DB:  BSF    03.0
02DC:  RLF    77,F
02DD:  RLF    78,F
02DE:  RLF    79,F
02DF:  RLF    7A,F
02E0:  DECFSZ 43,F
02E1:  GOTO   2B4
02E2:  MOVF   3F,W
02E3:  MOVWF  00
02E4:  INCF   04,F
02E5:  MOVF   40,W
02E6:  MOVWF  00
02E7:  INCF   04,F
02E8:  MOVF   41,W
02E9:  MOVWF  00
02EA:  INCF   04,F
02EB:  MOVF   42,W
02EC:  MOVWF  00
02ED:  RETURN
02EE:  MOVF   04,W
02EF:  MOVWF  2F
02F0:  MOVF   2E,W
02F1:  MOVWF  31
02F2:  BTFSC  03.2
02F3:  GOTO   30D
02F4:  MOVF   2D,W
02F5:  MOVWF  3A
02F6:  MOVF   2C,W
02F7:  MOVWF  39
02F8:  MOVF   2B,W
02F9:  MOVWF  38
02FA:  MOVF   2A,W
02FB:  MOVWF  37
02FC:  CLRF   3E
02FD:  CLRF   3D
02FE:  MOVLW  20
02FF:  MOVWF  3C
0300:  MOVLW  82
0301:  MOVWF  3B
0302:  CALL   0CA
0303:  MOVF   7A,W
0304:  MOVWF  2D
0305:  MOVF   79,W
0306:  MOVWF  2C
0307:  MOVF   78,W
0308:  MOVWF  2B
0309:  MOVF   77,W
030A:  MOVWF  2A
030B:  DECFSZ 31,F
030C:  GOTO   2F4
030D:  MOVF   2D,W
030E:  MOVWF  3A
030F:  MOVF   2C,W
0310:  MOVWF  39
0311:  MOVF   2B,W
0312:  MOVWF  38
0313:  MOVF   2A,W
0314:  MOVWF  37
0315:  MOVF   37,W
0316:  SUBLW  B6
0317:  MOVWF  37
0318:  CLRF   7A
0319:  MOVF   38,W
031A:  MOVWF  3B
031B:  BSF    38.7
031C:  BCF    03.0
031D:  RRF    38,F
031E:  RRF    39,F
031F:  RRF    3A,F
0320:  RRF    7A,F
0321:  RRF    79,F
0322:  RRF    78,F
0323:  RRF    77,F
0324:  DECFSZ 37,F
0325:  GOTO   31C
0326:  BTFSS  3B.7
0327:  GOTO   333
0328:  COMF   77,F
0329:  COMF   78,F
032A:  COMF   79,F
032B:  COMF   7A,F
032C:  INCF   77,F
032D:  BTFSC  03.2
032E:  INCF   78,F
032F:  BTFSC  03.2
0330:  INCF   79,F
0331:  BTFSC  03.2
0332:  INCF   7A,F
0333:  MOVF   7A,W
0334:  MOVWF  2D
0335:  MOVF   79,W
0336:  MOVWF  2C
0337:  MOVF   78,W
0338:  MOVWF  2B
0339:  MOVF   77,W
033A:  MOVWF  2A
033B:  BTFSS  2D.7
033C:  GOTO   34A
033D:  DECF   2F,F
033E:  BSF    2F.5
033F:  COMF   2A,F
0340:  COMF   2B,F
0341:  COMF   2C,F
0342:  COMF   2D,F
0343:  INCF   2A,F
0344:  BTFSC  03.2
0345:  INCF   2B,F
0346:  BTFSC  03.2
0347:  INCF   2C,F
0348:  BTFSC  03.2
0349:  INCF   2D,F
034A:  MOVLW  3B
034B:  MOVWF  36
034C:  MOVLW  9A
034D:  MOVWF  35
034E:  MOVLW  CA
034F:  MOVWF  34
0350:  CLRF   33
0351:  MOVLW  0A
0352:  MOVWF  31
0353:  MOVF   2E,W
0354:  BTFSC  03.2
0355:  INCF   2F,F
0356:  BSF    03.1
0357:  MOVLW  2A
0358:  MOVWF  04
0359:  BCF    03.7
035A:  MOVF   2D,W
035B:  MOVWF  3A
035C:  MOVF   2C,W
035D:  MOVWF  39
035E:  MOVF   2B,W
035F:  MOVWF  38
0360:  MOVF   2A,W
0361:  MOVWF  37
0362:  MOVF   36,W
0363:  MOVWF  3E
0364:  MOVF   35,W
0365:  MOVWF  3D
0366:  MOVF   34,W
0367:  MOVWF  3C
0368:  MOVF   33,W
0369:  MOVWF  3B
036A:  CALL   29F
036B:  MOVF   78,W
036C:  MOVF   77,F
036D:  BTFSS  03.2
036E:  GOTO   382
036F:  INCF   2E,W
0370:  SUBWF  31,W
0371:  BTFSC  03.2
0372:  GOTO   382
0373:  MOVF   2F,W
0374:  BTFSC  03.2
0375:  GOTO   384
0376:  ANDLW  0F
0377:  SUBWF  31,W
0378:  BTFSC  03.2
0379:  GOTO   37C
037A:  BTFSC  03.0
037B:  GOTO   3B4
037C:  BTFSC  2F.7
037D:  GOTO   3B4
037E:  BTFSC  2F.6
037F:  GOTO   384
0380:  MOVLW  20
0381:  GOTO   3B0
0382:  MOVLW  20
0383:  ANDWF  2F,F
0384:  BTFSS  2F.5
0385:  GOTO   392
0386:  BCF    2F.5
0387:  MOVF   2E,W
0388:  BTFSS  03.2
0389:  DECF   2F,F
038A:  MOVF   77,W
038B:  MOVWF  2F
038C:  MOVLW  2D
038D:  MOVWF  37
038E:  CALL   21D
038F:  MOVF   2F,W
0390:  MOVWF  77
0391:  CLRF   2F
0392:  MOVF   2E,W
0393:  SUBWF  31,W
0394:  BTFSS  03.2
0395:  GOTO   3A0
0396:  MOVF   77,W
0397:  MOVWF  2F
0398:  MOVLW  2E
0399:  MOVWF  37
039A:  CALL   21D
039B:  MOVF   2F,W
039C:  MOVWF  77
039D:  MOVLW  20
039E:  ANDWF  2F,F
039F:  MOVLW  00
03A0:  MOVLW  30
03A1:  BTFSS  2F.5
03A2:  GOTO   3B0
03A3:  BCF    2F.5
03A4:  MOVF   2E,W
03A5:  BTFSS  03.2
03A6:  DECF   2F,F
03A7:  MOVF   77,W
03A8:  MOVWF  2F
03A9:  MOVLW  2D
03AA:  MOVWF  37
03AB:  CALL   21D
03AC:  MOVF   2F,W
03AD:  MOVWF  77
03AE:  CLRF   2F
03AF:  MOVLW  30
03B0:  ADDWF  77,F
03B1:  MOVF   77,W
03B2:  MOVWF  37
03B3:  CALL   21D
03B4:  BCF    03.1
03B5:  MOVF   36,W
03B6:  MOVWF  3A
03B7:  MOVF   35,W
03B8:  MOVWF  39
03B9:  MOVF   34,W
03BA:  MOVWF  38
03BB:  MOVF   33,W
03BC:  MOVWF  37
03BD:  CLRF   3E
03BE:  CLRF   3D
03BF:  CLRF   3C
03C0:  MOVLW  0A
03C1:  MOVWF  3B
03C2:  CALL   29F
03C3:  MOVF   7A,W
03C4:  MOVWF  36
03C5:  MOVF   79,W
03C6:  MOVWF  35
03C7:  MOVF   78,W
03C8:  MOVWF  34
03C9:  MOVF   77,W
03CA:  MOVWF  33
03CB:  DECFSZ 31,F
03CC:  GOTO   356
03CD:  BCF    0A.3
03CE:  BCF    0A.4
03CF:  GOTO   454 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #device adc=10 // 0 -1023  
.................... #fuses XT,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOWRT,NODEBUG 
....................  
....................  
.................... #use delay(clock=4M) 
*
0011:  MOVLW  38
0012:  MOVWF  04
0013:  BCF    03.7
0014:  MOVF   00,W
0015:  BTFSC  03.2
0016:  GOTO   025
0017:  MOVLW  01
0018:  MOVWF  78
0019:  CLRF   77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 78,F
001D:  GOTO   019
001E:  MOVLW  4A
001F:  MOVWF  77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  GOTO   023
0023:  DECFSZ 00,F
0024:  GOTO   017
0025:  RETURN
.................... #use fast_io(a) 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003E:  MOVLW  0F
003F:  BSF    03.5
0040:  ANDWF  08,W
0041:  IORLW  F0
0042:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0043:  BCF    03.5
0044:  BSF    08.2
....................    delay_cycles(1); 
0045:  NOP
....................    lcd_output_enable(1); 
0046:  BSF    08.0
....................    delay_cycles(1); 
0047:  NOP
....................    high = lcd_read_nibble(); 
0048:  CALL   032
0049:  MOVF   78,W
004A:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
004B:  BCF    08.0
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BSF    08.0
....................    delay_us(1); 
004E:  NOP
....................    low = lcd_read_nibble(); 
004F:  CALL   032
0050:  MOVF   78,W
0051:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
0052:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0053:  MOVLW  0F
0054:  BSF    03.5
0055:  ANDWF  08,W
0056:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0057:  BCF    03.5
0058:  SWAPF  3F,W
0059:  MOVWF  77
005A:  MOVLW  F0
005B:  ANDWF  77,F
005C:  MOVF   77,W
005D:  IORWF  3E,W
005E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0032:  MOVF   08,W
0033:  MOVWF  77
0034:  SWAPF  08,W
0035:  ANDLW  0F
0036:  MOVWF  78
....................   #endif 
0037:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0026:  SWAPF  3F,W
0027:  ANDLW  F0
0028:  MOVWF  77
0029:  MOVLW  0F
002A:  ANDWF  08,W
002B:  IORWF  77,W
002C:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
002D:  NOP
....................    lcd_output_enable(1); 
002E:  BSF    08.0
....................    delay_us(2); 
002F:  GOTO   030
....................    lcd_output_enable(0); 
0030:  BCF    08.0
0031:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0038:  BSF    03.5
0039:  BCF    08.0
....................    lcd_rs_tris(); 
003A:  BCF    08.1
....................    lcd_rw_tris(); 
003B:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003C:  BCF    03.5
003D:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005F:  MOVF   78,W
0060:  MOVWF  3E
0061:  BTFSC  3E.7
0062:  GOTO   03E
....................    lcd_output_rs(address); 
0063:  BTFSS  3C.0
0064:  BCF    08.1
0065:  BTFSC  3C.0
0066:  BSF    08.1
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_rw(0); 
0068:  BCF    08.2
....................    delay_cycles(1); 
0069:  NOP
....................    lcd_output_enable(0); 
006A:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006B:  SWAPF  3D,W
006C:  MOVWF  3E
006D:  MOVLW  0F
006E:  ANDWF  3E,F
006F:  MOVF   3E,W
0070:  MOVWF  3F
0071:  CALL   026
....................    lcd_send_nibble(n & 0xf); 
0072:  MOVF   3D,W
0073:  ANDLW  0F
0074:  MOVWF  3E
0075:  MOVWF  3F
0076:  CALL   026
0077:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0078:  MOVLW  0F
0079:  BSF    03.5
007A:  ANDWF  08,W
007B:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
007C:  BCF    08.0
....................    lcd_rs_tris(); 
007D:  BCF    08.1
....................    lcd_rw_tris(); 
007E:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
007F:  BCF    03.5
0080:  BCF    08.1
....................    lcd_output_rw(0); 
0081:  BCF    08.2
....................    lcd_output_enable(0); 
0082:  BCF    08.0
....................      
....................    delay_ms(15); 
0083:  MOVLW  0F
0084:  MOVWF  38
0085:  CALL   011
....................    for(i=1;i<=3;++i) 
0086:  MOVLW  01
0087:  MOVWF  2A
0088:  MOVF   2A,W
0089:  SUBLW  03
008A:  BTFSS  03.0
008B:  GOTO   094
....................    { 
....................        lcd_send_nibble(3); 
008C:  MOVLW  03
008D:  MOVWF  3F
008E:  CALL   026
....................        delay_ms(5); 
008F:  MOVLW  05
0090:  MOVWF  38
0091:  CALL   011
0092:  INCF   2A,F
0093:  GOTO   088
....................    } 
....................     
....................    lcd_send_nibble(2); 
0094:  MOVLW  02
0095:  MOVWF  3F
0096:  CALL   026
....................    delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  38
0099:  CALL   011
....................    for(i=0;i<=3;++i) 
009A:  CLRF   2A
009B:  MOVF   2A,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0A8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
009F:  MOVF   2A,W
00A0:  CALL   004
00A1:  MOVWF  2B
00A2:  CLRF   3C
00A3:  MOVF   2B,W
00A4:  MOVWF  3D
00A5:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A6:  INCF   2A,F
00A7:  GOTO   09B
00A8:  BCF    0A.3
00A9:  BCF    0A.4
00AA:  GOTO   3EA (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
020B:  DECFSZ 39,W
020C:  GOTO   20E
020D:  GOTO   211
....................       address=LCD_LINE_TWO; 
020E:  MOVLW  40
020F:  MOVWF  3A
0210:  GOTO   212
....................    else 
....................       address=0; 
0211:  CLRF   3A
....................       
....................    address+=x-1; 
0212:  MOVLW  01
0213:  SUBWF  38,W
0214:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address); 
0215:  MOVF   3A,W
0216:  IORLW  80
0217:  MOVWF  3B
0218:  CLRF   3C
0219:  MOVF   3B,W
021A:  MOVWF  3D
021B:  CALL   038
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
021C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
021D:  MOVF   37,W
021E:  XORLW  07
021F:  BTFSC  03.2
0220:  GOTO   22B
0221:  XORLW  0B
0222:  BTFSC  03.2
0223:  GOTO   230
0224:  XORLW  06
0225:  BTFSC  03.2
0226:  GOTO   238
0227:  XORLW  02
0228:  BTFSC  03.2
0229:  GOTO   23E
022A:  GOTO   243
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
022B:  MOVLW  01
022C:  MOVWF  38
022D:  MOVWF  39
022E:  CALL   20B
022F:  GOTO   248
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0230:  CLRF   3C
0231:  MOVLW  01
0232:  MOVWF  3D
0233:  CALL   038
....................                      delay_ms(2); 
0234:  MOVLW  02
0235:  MOVWF  38
0236:  CALL   011
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0237:  GOTO   248
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0238:  MOVLW  01
0239:  MOVWF  38
023A:  MOVLW  02
023B:  MOVWF  39
023C:  CALL   20B
023D:  GOTO   248
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
023E:  CLRF   3C
023F:  MOVLW  10
0240:  MOVWF  3D
0241:  CALL   038
0242:  GOTO   248
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0243:  MOVLW  01
0244:  MOVWF  3C
0245:  MOVF   37,W
0246:  MOVWF  3D
0247:  CALL   038
....................      #endif 
....................    } 
0248:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned long int deger=0; 
.................... float gerilim=0,sicaklik=0; 
....................  
.................... void main() 
*
03D0:  CLRF   21
03D1:  CLRF   20
03D2:  CLRF   25
03D3:  CLRF   24
03D4:  CLRF   23
03D5:  CLRF   22
03D6:  CLRF   29
03D7:  CLRF   28
03D8:  CLRF   27
03D9:  CLRF   26
03DA:  BSF    03.5
03DB:  BSF    1F.0
03DC:  BSF    1F.1
03DD:  BSF    1F.2
03DE:  BCF    1F.3
03DF:  MOVLW  07
03E0:  MOVWF  1C
03E1:  BCF    03.7
03E2:  MOVLW  1F
03E3:  ANDWF  03,F
.................... { 
....................     
....................     
....................    set_tris_a(0x20); 
03E4:  MOVLW  20
03E5:  MOVWF  05
....................    set_tris_d(0x00); 
03E6:  MOVLW  00
03E7:  MOVWF  08
....................    lcd_init(); 
03E8:  BCF    03.5
03E9:  GOTO   078
....................    setup_adc(adc_clock_div_32); 
03EA:  BSF    03.5
03EB:  BCF    1F.6
03EC:  BCF    03.5
03ED:  BCF    1F.6
03EE:  BSF    1F.7
03EF:  BSF    03.5
03F0:  BSF    1F.7
03F1:  BCF    03.5
03F2:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
03F3:  BSF    03.5
03F4:  BCF    1F.0
03F5:  BCF    1F.1
03F6:  BCF    1F.2
03F7:  BCF    1F.3
....................     
....................    set_adc_channel(4); 
03F8:  MOVLW  20
03F9:  MOVWF  78
03FA:  BCF    03.5
03FB:  MOVF   1F,W
03FC:  ANDLW  C7
03FD:  IORWF  78,W
03FE:  MOVWF  1F
....................     
....................    while(TRUE) 
....................    { 
....................       deger=read_adc(); 
03FF:  BSF    1F.2
0400:  BTFSC  1F.2
0401:  GOTO   400
0402:  BSF    03.5
0403:  MOVF   1E,W
0404:  BCF    03.5
0405:  MOVWF  20
0406:  MOVF   1E,W
0407:  MOVWF  21
....................       gerilim=deger*4.88759; 
0408:  MOVF   21,W
0409:  MOVWF  2B
040A:  MOVF   20,W
040B:  MOVWF  2A
040C:  GOTO   0AB
040D:  MOVF   7A,W
040E:  MOVWF  3A
040F:  MOVF   79,W
0410:  MOVWF  39
0411:  MOVF   78,W
0412:  MOVWF  38
0413:  MOVF   77,W
0414:  MOVWF  37
0415:  MOVLW  23
0416:  MOVWF  3E
0417:  MOVLW  67
0418:  MOVWF  3D
0419:  MOVLW  1C
041A:  MOVWF  3C
041B:  MOVLW  81
041C:  MOVWF  3B
041D:  CALL   0CA
041E:  MOVF   7A,W
041F:  MOVWF  25
0420:  MOVF   79,W
0421:  MOVWF  24
0422:  MOVF   78,W
0423:  MOVWF  23
0424:  MOVF   77,W
0425:  MOVWF  22
....................       //sicaklik=gerilim/10+2; 
....................       sicaklik=gerilim/10; 
0426:  MOVF   25,W
0427:  MOVWF  2D
0428:  MOVF   24,W
0429:  MOVWF  2C
042A:  MOVF   23,W
042B:  MOVWF  2B
042C:  MOVF   22,W
042D:  MOVWF  2A
042E:  CLRF   31
042F:  CLRF   30
0430:  MOVLW  20
0431:  MOVWF  2F
0432:  MOVLW  82
0433:  MOVWF  2E
0434:  GOTO   13F
0435:  MOVF   7A,W
0436:  MOVWF  29
0437:  MOVF   79,W
0438:  MOVWF  28
0439:  MOVF   78,W
043A:  MOVWF  27
043B:  MOVF   77,W
043C:  MOVWF  26
....................       printf(lcd_putc,"\fdeger=%f",sicaklik); 
043D:  MOVLW  0C
043E:  BSF    03.6
043F:  MOVWF  0D
0440:  MOVLW  00
0441:  MOVWF  0F
0442:  BCF    03.0
0443:  MOVLW  07
0444:  BCF    03.6
0445:  MOVWF  2A
0446:  GOTO   249
0447:  MOVLW  89
0448:  MOVWF  04
0449:  MOVF   29,W
044A:  MOVWF  2D
044B:  MOVF   28,W
044C:  MOVWF  2C
044D:  MOVF   27,W
044E:  MOVWF  2B
044F:  MOVF   26,W
0450:  MOVWF  2A
0451:  MOVLW  02
0452:  MOVWF  2E
0453:  GOTO   2EE
....................       delay_ms(100); 
0454:  MOVLW  64
0455:  MOVWF  38
0456:  CALL   011
0457:  GOTO   3FF
....................    } 
....................  
.................... } 
0458:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
